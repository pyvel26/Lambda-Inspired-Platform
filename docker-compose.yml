services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    environment:
      DB_HOST: postgres
      POSTGRES_DB: finance
      POSTGRES_USER: dataeng
      POSTGRES_PASSWORD: secure123
    ports:
      - "5432:5432"
    volumes:
      - fraud_detection_postgres:/var/lib/postgresql/data

    networks:
      - finance_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dataeng -d finance"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Pgadmin
  pgadmin:
    image: dpage/pgadmin4
    ports:
      - "5050:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin123
    depends_on:
      - postgres

  # CSV Processor Application
  csv_processor:
    build:
      context: .
      dockerfile: batch_processor/batch_csv.Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./data:/app/data
      - ./output:/app/output
    networks:
      - finance_network
    command: python processor.py

  ## API
  producer_api:
    build:
      context: .
      dockerfile: producer_streaming_api/producer.Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "8000:8000"
    networks:
      - finance_network
    command: uvicorn producer_api:app --host 0.0.0.0 --port 8000

  ## Consumer
  consumer_api:
    build:
      context: .
      dockerfile: consumer_stream_api/consumer.Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: finance
      DB_USER: dataeng
      DB_PASSWORD: secure123
    ports:
      - "8001:8000"
    networks:
      - finance_network
    command: uvicorn consumer_api:app --host 0.0.0.0 --port 8000

# Named volumes for data persistence
volumes:
  fraud_detection_postgres:
  fraud_detection_kafka:

# Custom network for container communication
networks:
  finance_network:
    driver: bridge