services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    environment:
      DB_HOST: postgres
      POSTGRES_DB: finance
      POSTGRES_USER: dataeng
      POSTGRES_PASSWORD: secure123
    ports:
      - "5432:5432"
    volumes:
      - fraud_detection_postgres:/var/lib/postgresql/data

    networks:
      - finance_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dataeng -d finance"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Pgadmin
  pgadmin:
    image: dpage/pgadmin4
    ports:
      - "5050:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin123
    depends_on:
      - postgres
    networks:
      - finance_network

  # CSV Processor Application
  csv_processor:
    build:
      context: .
      dockerfile: batch_processor/batch_csv.Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    volumes:
      - ./data:/app/data
      - ./output:/app/output
    networks:
      - finance_network
    command: python batch_processor/processor.py

  ## API
  producer_api:
    build:
      context: .
      dockerfile: producer_streaming_api/producer.Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "8000:8000"
    networks:
      - finance_network
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8000/health || exit 1" ]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s
    command: python producer_streaming_api/producer_api.py

  ## Consumer
  consumer_api:
    build:
      context: .
      dockerfile: consumer_stream_api/consumer.Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      PYTHONUNBUFFERED: 1
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: finance
      DB_USER: dataeng
      DB_PASSWORD: secure123
    ports:
      - "8001:8000"
    networks:
      - finance_network
    healthcheck:
      test: [ "CMD-SHELL", "pgrep -f consumer_stream_api/consumer_api.py || exit 1" ]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s
    command: python consumer_stream_api/consumer_api.py

  kafka:
    image: confluentinc/cp-kafka:latest
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      CLUSTER_ID: kafka-cluster-1
    ports:
      - "9092:9092"
    volumes:
      - fraud_detection_kafka:/var/lib/kafka/data
    networks:
      - finance_network
    healthcheck:
      test: [ "CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s


# Named volumes for data persistence
volumes:
  fraud_detection_postgres:
  fraud_detection_kafka:

# Custom network for container communication
networks:
  finance_network:
    driver: bridge